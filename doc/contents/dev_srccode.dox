/**

\page dev_srccode Development of the simulator source code


\section dev_srccode_general General information about simulators architecture

\subsection dev_srccode_general_methods Simulator methods sequence and framework interactions

As mentioned in the previous section, a simulator is a C++ class
which defines mandatory methods (see \ref dev_oviewsim_cppclass_methods). 
These methods are called by the OpenFLUID framework at the right time during the simulation,
following the interactions sequence in the figure below. 

\image html openfluid_sequence.png
\image latex openfluid_sequence.pdf "Interactions sequence between the OpenFLUID framework and the simulators" width=11.5cm

Among these methods, the 
\if doc-is-latex 
\b initializeRun()
\else
\link openfluid::ware::PluggableSimulator::initializeRun initializeRun() \endlink
\endif
and 
\if doc-is-latex 
\b runStep()
\else
\link openfluid::ware::PluggableSimulator::runStep runStep() \endlink
\endif 
methods have a special behaviour:  
these two methods must return the simulation time when the simulator will be called again.
\n

This simulation time can be
<ul>
<li>\if doc-is-latex 
\b Duration()
\else
\link openfluid::ware::PluggableSimulator::Duration() Duration() \endlink
\endif
to be called in a number of seconds given as parameter
<li>\if doc-is-latex 
\b DefaultDeltaT()
\else
\link openfluid::ware::PluggableSimulator::DefaultDeltaT() DefaultDeltaT() \endlink
\endif
to be called in a number of seconds given as default DeltaT in the input dataset
<li>\if doc-is-latex 
\b MultipliedDefaultDeltaT()
\else
\link openfluid::ware::PluggableSimulator::MultipliedDefaultDeltaT() MultipliedDefaultDeltaT() \endlink
\endif
to be called in a number of seconds given as default DeltaT in the input dataset,
multiplied by a the value given as parameter
<li>\if doc-is-latex 
\b AtTheEnd()
\else
\link openfluid::ware::PluggableSimulator::AtTheEnd() AtTheEnd() \endlink
\endif
to be called only once at the end of simulation duration
<li>\if doc-is-latex 
\b Never()
\else
\link openfluid::ware::PluggableSimulator::Never() Never() \endlink
\endif
to never be called again
</ul>

Example for a fixed time step simulator, with a time step equal equal to the default DeltaT value given in the input dataset:
\code
openfluid::base::SchedulingRequest initializeRun()
{
  // do something here
  
  return DefaultDeltaT();
}

openfluid::base::SchedulingRequest runStep()
{
  // do something here
  
  return DefaultDeltaT();
}
\endcode


Example for a variable time step simulator, based on the internal computation of the simulator:
\code
openfluid::base::SchedulingRequest initializeRun()
{
  // do something here
  
  return DefaultDeltaT();
}

openfluid::base::SchedulingRequest runStep()
{
  double TmpValue = 0.0;

  // do something here

  if (TmpValue < 1.0)
    return DefaultDeltaT();
  else
    return Duration(10);
}
\endcode


For fully synchronized coupled simulators, 
all simulators must return the same duration for the next calling,
usually \b DefaultDeltaT() .

\subsection dev_srccode_general_datatypes OpenFLUID data types

Simulation data exchanged through the OpenFLUID framework should be typed with an OpenFLUID defined type.\n
The available simple types are:
<ul>
<li>\b openfluid::core::BooleanValue for storing boolean values
<li>\b openfluid::core::IntegerValue for storing long integer values
<li>\b openfluid::core::DoubleValue for storing double precision values
<li>\b openfluid::core::StringValue for storing string values
</ul>

The available compound types are:
<ul>
<li>\b openfluid::core::VectorValue for storing vector data
<li>\b openfluid::core::MatrixValue for storing matrix data
<li>\b openfluid::core::MapValue for storing associative keys-value data
</ul>

A specific type is available for storing non-existing values:
<ul>
<li>\b openfluid::core::NullValue
</ul>
\n


Simulation data are stored using these types : 
<ul>
<li>Simulation variables : stored as any type
<li>Spatial attributes : stored as openfluid::core::StringValue, 
and can be converted to any other type
<li>Simulator parameters : stored as openfluid::core::StringValue, 
and can be converted to any other type
<li>Informations associated to events : stored as openfluid::core::StringValue, 
and can be converted to any other type
</ul>

Each data type can be converted to and from openfluid::core::StringValue (as far as the string format is correct). 


Simulation variables can be typed or untyped. 
This is set at the declaration of these variables (see \ref dev_signature_data_vars \endlink).\n
In case of typed variables, each value of the variable must be of the type of the variable.
In case of untyped variables, values for the variable can be of any type. 



\section dev_srccode_space Handling the spatial domain

\subsection dev_srccode_space_parse Parsing the spatial graph

The spatial graph represents the spatial domain where coupled simulators will be applied.
Parsing this graph in different ways is a common task in simulators.
This graph can be browsed using predefined macros.\n

\subsubsection dev_srccode_space_parse_seq Sequential parsing

Spatial units can be parsed following the process order by using the following OpenFLUID macros:
<ul>
<li>
\if doc-is-latex 
\b OPENFLUID_UNITS_ORDERED_LOOP
\else
#OPENFLUID_UNITS_ORDERED_LOOP
\endif
for parsing spatial units of a given units class
<li>
\if doc-is-latex 
\b OPENFLUID_ALLUNITS_ORDERED_LOOP
\else
#OPENFLUID_ALLUNITS_ORDERED_LOOP
\endif
for parsing of all units in the spatial domain 
</ul>
\n
To parse a specific list of of spatial units, you can use the macro:
<ul>
<li>
\if doc-is-latex 
\b OPENFLUID_UNITSLIST_LOOP
\else
#OPENFLUID_UNITSLIST_LOOP
\endif
 </ul>

\n
The source code below shows spatial graph parsing examples. 
The first part of the source code shows how to browse all units of the SU units class, 
and how to browse the \"From\" units for each SU unit.
The second part of the source code shows how to browse all units of the spatial domain. 
\code
openfluid::base::SchedulingRequest runStep()
{
  openfluid::core::Unit* SU;
  openfluid::core::Unit* UU;
  openfluid::core::Unit* UpSU;
  openfluid::core::UnitsPtrList_t* UpSUsList;
  openfluid::core::DoubleValue TmpValue;

  OPENFLUID_UNITS_ORDERED_LOOP("SU",SU)
  {
    UpSUsList = SU->getFromUnits("SU");

    OPENFLUID_UNITSLIST_LOOP(UpSUsList,UpSU)
    {
      // do something here
    }    
  }  
  
  OPENFLUID_ALLUNITS_ORDERED_LOOP(UU)
  {  
    // do something here
  }
  
  return DefaultDeltaT();
}
\endcode


\subsubsection dev_srccode_space_parse_par Parallel processing using multithreading

A process defined as a method of simulator class can be applied to the spatial graph, 
following the process order, using the following methods:
<ul>
<li> 
\if doc-is-latex \b APPLY_UNITS_ORDERED_LOOP_THREADED \else #APPLY_UNITS_ORDERED_LOOP_THREADED \endif
 for applying a process to a given units class. Extra arguments can be passed (see example below). 
<li>\if doc-is-latex \b APPLY_ALLUNITS_ORDERED_LOOP_THREADED \else #APPLY_ALLUNITS_ORDERED_LOOP_THREADED \endif
 for applying a process to a all units of the spatial domain.
Extra arguments can also be passed (see example below).\n 
</ul>
The first argument of the method passed to the macro must be
a pointer to an \if doc-is-latex \b openfluid::core::Unit \endif
 as it represents the currently processed spatial unit. 

\n
The code below shows how to apply a method in parallel over the spatial graph:
\code
void computeA(openfluid::core::Unit* U)
{
 // compute something
 // can use/produce variables
}


void computeB(openfluid::core::Unit* U, 
              const double Coeff)
{
 // compute something else, with extra args
 // can use/produce variables
}


openfluid::base::SchedulingRequest runStep()
{

  APPLY_UNITS_ORDERED_LOOP_THREADED("SU",MySimulator::computeA);
  APPLY_UNITS_ORDERED_LOOP_THREADED("TU",MySimulator::computeB,2.5);
  
  APPLY_ALLUNITS_ORDERED_LOOP_THREADED(MySimulator::computeA);

  return DefaultDeltaT();
}
\endcode


Please note:
<ul>
<li>If a spatial loop is used inside other spatial loop, it is recommended to use multithreading in only one loop.
<li>In case of concurrent data access, it is strongly recommended to use mutex locks for thread safe data handling.
<li>Concurrent parsing using multithreading should improve computing performance, reducing simulations durations.
But in case of very short computing durations, the cost of multithreading management
may counterbalance the speed improvements of concurrent computing. 

</ul>


\subsection dev_srccode_space_query Querying the spatial graph

The spatial domain graph can be queried during simulations, in order to get
informations about spatial units and connections.

The following methods are available:
\if doc-is-latex
<ul>
<li>\b OPENFLUID_IsUnitExist
<li>\b OPENFLUID_IsUnitClassExist
<li>\b OPENFLUID_GetUnitsCount
<li>\b OPENFLUID_IsUnitConnectedTo
<li>\b OPENFLUID_IsUnitConnectedFrom
<li>\b OPENFLUID_IsUnitChildOf
<li>\b OPENFLUID_IsUnitParentOf
</ul>
\else
<ul>
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_IsUnitExist OPENFLUID_IsUnitExist \endlink
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_IsUnitClassExist OPENFLUID_IsUnitClassExist \endlink
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_GetUnitsCount OPENFLUID_GetUnitsCount \endlink
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_IsUnitConnectedTo OPENFLUID_IsUnitConnectedTo \endlink
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_IsUnitConnectedFrom OPENFLUID_IsUnitConnectedFrom \endlink
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_IsUnitChildOf OPENFLUID_IsUnitChildOf \endlink
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_IsUnitParentOf OPENFLUID_IsUnitParentOf \endlink
</ul>
\endif

\subsection dev_srccode_space_mod Modifying the spatial graph

The spatial graph can be statically defined through the input dataset.
It can also be defined and modified dynamically during simulations, using primitives allowing to 
create and delete spatial units, and also to add and remove connections between these
spatial units.\n
Although the creation, deletion and modification of connections are allowed at any stage of the simulation,
the creation, deletion and modification of spatial units are currently allowed only during the data preparation stage
(i.e. in the prepareData() method of the simulator).\n
For consistent use of simulators which modify the spatial domain graph, 
please fill the signature with the correct directives. See \ref dev_signature_data_spatial.

\subsubsection dev_srccode_space_mod_units Creating and deleting spatial units

In order to create and delete units, you can use the following methods:
\if doc-is-latex
<ul>
<li>\b OPENFLUID_AddUnit
<li>\b OPENFLUID_DeleteUnit
</ul>
\else
<ul>
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_AddUnit OPENFLUID_AddUnit \endlink
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_DeleteUnit OPENFLUID_DeleteUnit \endlink
</ul>
\endif


\subsubsection dev_srccode_space_mod_cnx Adding and removing spatial connections

Connections between spatial units can be of two types:
<ul>
<li>"From-To" connections, linking spatial units topologically. These connections are usually used in "fluxes-like" processes.
<li>"Parent-Child" connections, linking units hierarchically.
</ul>

In order to add and remove connections, you can use the following methods, whenever during simulations:
\if doc-is-latex
<ul>
<li>\b OPENFLUID_AddFromToConnection
<li>\b OPENFLUID_AddChildParentConnection
<li>\b OPENFLUID_RemoveFromToConnection
<li>\b OPENFLUID_RemoveChildParentConnection
</ul>
\else
<ul>
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_AddFromToConnection OPENFLUID_AddFromToConnection \endlink
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_AddChildParentConnection OPENFLUID_AddChildParentConnection \endlink
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_RemoveFromToConnection OPENFLUID_RemoveFromToConnection \endlink
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_RemoveChildParentConnection OPENFLUID_RemoveChildParentConnection \endlink
</ul>
\endif
\n
<i>Example:</i>
\n
\code
void prepareData()
{

 /*
      TU.1         TU.2
        |            |
        -->  TU.22 <--
               |
               --> TU.18
                     |
          TU.52 --> OU.5 <-- OU.13
                     |
                     --> OU.25

       VU1 <-> VU2

   with:
   TU1, TU2, TU22, TU18 are children of VU1
   TU52, OU5, OU13, OU25 are children of VU2
*/

  OPENFLUID_AddUnit("VU",1,1);
  OPENFLUID_AddUnit("VU",2,2);
  OPENFLUID_AddUnit("TU",1,1);
  OPENFLUID_AddUnit("TU",2,1);
  OPENFLUID_AddUnit("TU",22,2);
  OPENFLUID_AddUnit("TU",18,3);
  OPENFLUID_AddUnit("TU",52,1);
  OPENFLUID_AddUnit("OU",5,4);
  OPENFLUID_AddUnit("OU",13,1);
  OPENFLUID_AddUnit("OU",25,5);

  OPENFLUID_AddFromToConnection("VU",1,"VU",2);
  OPENFLUID_AddFromToConnection("VU",2,"VU",1);
  OPENFLUID_AddFromToConnection("TU",1,"TU",22);
  OPENFLUID_AddFromToConnection("TU",2,"TU",22);
  OPENFLUID_AddFromToConnection("TU",22,"TU",18);
  OPENFLUID_AddFromToConnection("TU",18,"OU",5);
  OPENFLUID_AddFromToConnection("TU",52,"OU",5);
  OPENFLUID_AddFromToConnection("OU",13,"OU",5);
  OPENFLUID_AddFromToConnection("OU",5,"OU",25);

  OPENFLUID_AddChildParentConnection("TU",1,"VU",1);
  OPENFLUID_AddChildParentConnection("TU",2,"VU",1);
  OPENFLUID_AddChildParentConnection("TU",22,"VU",1);
  OPENFLUID_AddChildParentConnection("TU",18,"VU",1);
  OPENFLUID_AddChildParentConnection("TU",52,"VU",2);
  OPENFLUID_AddChildParentConnection("OU",5,"VU",2);
  OPENFLUID_AddChildParentConnection("OU",13,"VU",2);
  OPENFLUID_AddChildParentConnection("OU",25,"VU",2);
}
\endcode

\subsubsection dev_srccode_space_mod_gen Generating spatial domain graphs automatically

Generators can help to automatically build a spatial domain graph, or to extend an existing one.\n
Currently, only one spatial domain generator is available:
\if doc-is-latex
<ul>
<li>\b OPENFLUID_BuildUnitsMatrix
</ul>
\else
<ul>
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_BuildUnitsMatrix OPENFLUID_BuildUnitsMatrix \endlink
</ul>
\endif


\section dev_srccode_time Informations about simulation time

Simulators can access to informations about simulation time.
There are constant time informations, such as simulation duration or begin and end date,
and evolutive informations such as current time index.

Constant informations about simulation time can be accessed from any part of the simulator
(except from the constructor), using the following methods:
\if doc-is-latex
<ul>
<li>\b OPENFLUID_GetBeginDate returns the beginning date of the simulation
<li>\b OPENFLUID_GetEndDate returns the end date of the simulation
<li>\b OPENFLUID_GetSimulationDuration returns the duration of the simulation (in seconds)
<li>\b OPENFLUID_GetDefaultDeltaT returns the default time step of the simulation (in seconds),
given in the input dataset
</ul>
\else
<ul>
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_GetBeginDate OPENFLUID_GetBeginDate \endlink 
returns the beginning date of the simulation
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_GetEndDate OPENFLUID_GetEndDate \endlink 
returns the end date of the simulation
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_GetSimulationDuration OPENFLUID_GetSimulationDuration \endlink
returns the duration of the simulation (in seconds)
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_GetDefaultDeltaT OPENFLUID_GetDefaultDeltaT \endlink
returns the default time step of the simulation (in seconds),
given in the input dataset
</ul>
\endif

Evolutive informations about simulation time can be accessed only from specific parts 
of the simulator, using the following methods:
\if doc-is-latex
<ul>
<li>\b OPENFLUID_GetCurrentTimeIndex 
returns the current time index (in seconds) of the simulation,
and is available from the initializeRun(), runStep() and finalizeRun() methods of the simulator
<li>\b OPENFLUID_GetCurrentDate returns the current date of the simulation,
and is available from the initializeRun(), runStep() and finalizeRun() methods of the simulator
<li>\b OPENFLUID_GetPreviousRunTimeIndex returns the time index
corresponding to the previous execution of the simulator,
and is available from the runStep() and finalizeRun() methods of the simulator  
</ul>
\else
<ul>
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_GetCurrentTimeIndex OPENFLUID_GetCurrentTimeIndex \endlink
returns the current time index (in seconds) of the simulation,
and is available from the initializeRun(), runStep() and finalizeRun() methods of the simulator
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_GetCurrentDate OPENFLUID_GetCurrentDate \endlink 
returns the current date of the simulation,
and is available from the initializeRun(), runStep() and finalizeRun() methods of the simulator
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_GetPreviousRunTimeIndex OPENFLUID_GetPreviousRunTimeIndex \endlink returns the time index
corresponding to the previous execution of the simulator,
and is available from the runStep() and finalizeRun() methods of the simulator  
</ul>
\endif


\n
Example of code:
\code
openfluid::base::SchedulingRequest runStep()
{
  long int Duration = OPENFLUID_GetSimulationDuration();

  long int CurrentIndex = OPENFLUID_GetCurrentTimeIndex();
  openfluid::core::DateTime CurrentDT = OPENFLUID_GetCurrentDate();  
  
  return DefaultDeltaT();      
}
\endcode


\section dev_srccode_simparams Simulator parameters

Simulators parameters are passed through the model.fluidx file.
They can be accessed in the source code from the
\if doc-is-latex
initParams
\else
\link openfluid::ware::PluggableSimulator::initParams initParams \endlink
\endif 
method of the simulator.
Values of simulators parameters can be retreived using:
<ul>
<li>
\if doc-is-latex
\b OPENFLUID_GetSimulatorParameter.
\else
\link openfluid::ware::PluggableSimulator::OPENFLUID_GetSimulatorParameter OPENFLUID_GetSimulatorParameter\endlink.
\endif
</ul>
The requested parameter name must be the same as the one used in the model.fluidx file (see \ref user_fluidx_sections_model), 
or be filled from the OpenFLUID-Builder graphical interface.\n
\n
Example of initParams method:
\code
void initParams(const openfluid::ware::WareParams_t& Params)
{
  m_MyParam = 0; //default value
  OPENFLUID_GetSimulatorParameter(Params,"myparam",m_MyParam);
}
\endcode

To be reused in other part of the simulator, 
the variable storing a simulator parameter should be declared as class member.
The types of parameters can be string, double, integer, boolean, vector of string, vector of double
(see API documentation of 
\if doc-is-latex
OPENFLUID_GetSimulatorParameter
\else
\link openfluid::ware::PluggableSimulator::OPENFLUID_GetSimulatorParameter OPENFLUID_GetSimulatorParameter \endlink
\endif
 method to get more informations about other available types, available on OpenFLUID web site). 


\section dev_srccode_attrs Spatial attributes

In order to access or update values of spatial attributes, or to test if a spatial attribute is present,
you can use the following methods:
<ul>
\if doc-is-latex
<li>\b OPENFLUID_GetAttribute to get the value of an attribute
<li>\b OPENFLUID_SetAttribute to set the value of an attribute
<li>\b OPENFLUID_IsAttributeExist to test if an attribute exists
\else
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_GetAttribute OPENFLUID_GetAttribute \endlink
to get the value of an attribute
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_SetAttribute OPENFLUID_SetAttribute \endlink
to set the value of an attribute
<li>\link openfluid::ware::PluggableSimulator::OPENFLUID_IsAttributeExist OPENFLUID_IsAttributeExist \endlink
to to test if an attribute exists
\endif
</ul>

The methods to test if an attribute exists or to access to an attribute value 
are usable from any simulators part except from the initParams() part.
The methods to update an attribute value are only usable 
from the prepareData() and checkConsistency() parts of the simulator.\n
The names of the attributes must match the names in the input dataset (see \ref user_fluidx_sections_spatialdomain), 
or the name of an attribute created by a simulator.

Example of use:
\code
openfluid::base::SchedulingRequest runStep()
{
  openfluid::core::Unit* SU;
  openfluid::core::DoubleValue AreaValue;

  OPENFLUID_UNITS_ORDERED_LOOP("SU",SU)
  {
    OPENFLUID_GetAttribute(SU,"area",AreaValue);
    
    // continue with source code using the value of the area attribute
  }
}
\endcode


\section dev_srccode_vars Simulation variables

The values for the simulation variables are attached to the spatial units.

The available methods to access to simulation variables are:
<ul>
<li>\if doc-is-latex \b OPENFLUID_GetVariable
\else \link openfluid::ware::PluggableSimulator::OPENFLUID_GetVariable OPENFLUID_GetVariable \endlink
\endif
to get the value of a variable at the current time index or at a given time index
<li>\if doc-is-latex \b OPENFLUID_GetVariables
\else \link openfluid::ware::PluggableSimulator::OPENFLUID_GetVariables OPENFLUID_GetVariables \endlink
\endif
to get values of a variable between two times indexes
<li>\if doc-is-latex \b OPENFLUID_GetLatestVariable
\else \link openfluid::ware::PluggableSimulator::OPENFLUID_GetLatestVariable OPENFLUID_GetLatestVariable \endlink
\endif
to get the latest available value for the variable
<li>\if doc-is-latex \b OPENFLUID_GetLatestVariables
\else \link openfluid::ware::PluggableSimulator::OPENFLUID_GetLatestVariables OPENFLUID_GetLatestVariables \endlink
\endif
to get the latest values of a variable since a given time index
</ul>

The available methods to add or update a value of a simulation variable are:
<ul>
<li>\if doc-is-latex \b OPENFLUID_AppendVariable
\else
\link openfluid::ware::PluggableSimulator::OPENFLUID_AppendVariable OPENFLUID_AppendVariable \endlink
\endif
to add a value to a variable for the current time index
<li>\if doc-is-latex \b OPENFLUID_SetVariable
\else
\link openfluid::ware::PluggableSimulator::OPENFLUID_SetVariable OPENFLUID_SetVariable \endlink
\endif
to update the value of a variable for the current time index
</ul>


The available methods to test if a simulation variable exists are:
<ul>
<li>\if doc-is-latex \b OPENFLUID_IsVariableExist
\else \link openfluid::ware::PluggableSimulator::OPENFLUID_IsVariableExist OPENFLUID_IsVariableExist \endlink
\endif
to test if a variable exists or if a value for this variable exists at the given time index 
<li>\if doc-is-latex \b OPENFLUID_IsTypedVariableExist
\else \link openfluid::ware::PluggableSimulator::OPENFLUID_IsTypedVariableExist OPENFLUID_IsTypedVariableExist \endlink
\endif
to test if a variable exists or if a value for this variable exists at the given time index,
and its type matches the given type
</ul>

These methods can be accessed only from the initializeRun(), runStep()
and finalizeRun() parts of the simulator.
\n
\n
Example:
\n
\code
openfluid::base::SchedulingRequest runStep()
{
  openfluid::core::DoubleValue TmpValue;
  openfluid::core::Unit* SU;

  OPENFLUID_UNITS_ORDERED_LOOP("SU",SU)
  {
    OPENFLUID_GetVariable(SU,"MyVar",TmpValue);
    TmpValue = TmpValue * 2;
    OPENFLUID_AppendVariable(SU,"MyVarX2",TmpValue);
  }
  
  return DefaultDeltaT();
}
\endcode




\section dev_srccode_events Events

A discrete event is defined by the \if doc-is-latex \b openfluid::core::Event \endif
 class. It is made of a date and a set of key-value informations
that can be accessed by methods proposed by the openfluid::core::Event class.\n 
A collection of discrete events can be contained in an \if doc-is-latex \b \endif openfluid::core::EventsCollection class.\n
\n
A collection of events occuring during a period on a given spatial unit can be acessed using 
<ul>
<li>
\if doc-is-latex \b OPENFLUID_GetEvents
\else
\link openfluid::ware::PluggableSimulator::OPENFLUID_GetEvents OPENFLUID_GetEvents \endlink
\endif
</ul>
This method returns an \if doc-is-latex \b openfluid::core::EventsCollection \endif
 that can be processed.\n
The returned event collection can be parsed using the specific loop macro: 
<ul>
<li>
\if doc-is-latex \b OPENFLUID_EVENT_COLLECTION_LOOP
\else #OPENFLUID_EVENT_COLLECTION_LOOP
\endif
</ul>
At each loop iteration, the next event can be processed.\n
\n
An event can be added on a specific spatial unit at a given date using:
<ul>
<li>
\if doc-is-latex \b OPENFLUID_AppendEvent
\else \link openfluid::ware::PluggableSimulator::OPENFLUID_AppendEvent OPENFLUID_AppendEvent \endlink
\endif
</ul>
<i>Example of process of events occurring on the current time step:</i>
\code
openfluid::base::SchedulingRequest runStep()
{
  openfluid::core::Unit* TU;
  openfluid::core::EventCollection EvColl;
  openfluid::core::Event* Ev;
  std::list<openfluid::core::Event* > *EvList;
  openfluid::core::DateTime BTime, ETime;

  BTime = OPENFLUID_GetCurrentDate();
  ETime = OPENFLUID_GetCurrentDate() - 86400;

  OPENFLUID_UNITS_ORDERED_LOOP("TU",TU)
  {
    OPENFLUID_GetEvents(TU,BTime,ETime,EvColl);
    EvList = EvColl.getEventsList();

    OPENFLUID_EVENT_COLLECTION_LOOP(EvColl.getEventsList(),Ev)
    {
      if (Ev->isInfoEquals("molecule","glyphosate"))
      {
        // process the event
      }
    }

  }

  return DefaultDeltaT();
}
\endcode



\section dev_srccode_state Internal state data

In order to keep the status of the simulation function between calls
(from the run step to the next one for example), internal variables can be stored as class members.
The class members are persistant during the whole life of the simulator.\n
To store distributed values, data structures are available to associate a spatial unit ID to a storedvalue.
These data structures exist for different types of data:   
<ul>
<li>\if doc-is-latex \b \endif openfluid::core::IDFloatMap
<li>\if doc-is-latex \b \endif openfluid::core::IDDoubleMap
<li>\if doc-is-latex \b \endif openfluid::core::IDIntMap
<li>\if doc-is-latex \b \endif openfluid::core::IDBoolMap
<li>\if doc-is-latex \b \endif openfluid::core::IDDoubleValueMap
<li>\if doc-is-latex \b \endif openfluid::core::IDVectorValueMap
<li>\if doc-is-latex \b \endif openfluid::core::IDVectorValuePtrMap
<li>\if doc-is-latex \b \endif openfluid::core::IDSerieOfDoubleValueMap
<li>\if doc-is-latex \b \endif openfluid::core::IDSerieOfDoubleValuePtrMap
</ul>


Example of declaration of ID-map structures in private members of the simulator class:
\code
class MySimulator : public openfluid::ware::PluggableSimulator
{
  private:

    openfluid::core::IDDoubleMap m_LastValue;

  public:
  
    // rest of the simulator class

}
\endcode


Example of usage of the ID-map structures:
\code
openfluid::base::SchedulingRequest runStep()
{
  int ID;
  double TmpValue;
  openfluid::core::Unit* SU;

  OPENFLUID_UNITS_ORDERED_LOOP("SU",SU)
  {
    ID = SU->getID();

    TmpValue = TmpValue + m_LastValue[ID]
    OPENFLUID_AppendVariable(SU,"MyVarPlus",TmpValue);

    m_LastValue[ID] = TmpValue;
  }

  return DefaultDeltaT();
}
\endcode


\section dev_srccode_runenv Runtime environment

The runtime environment of the simulator are informations about the context during execution of
the simulation: input and output directories, temporary directory,...\n
They are accessible from simulators using:
<ul>
<li>
\if doc-is-latex
\b OPENFLUID_GetRunEnvironment
\else
\link openfluid::ware::PluggableSimulator::OPENFLUID_GetRunEnvironment OPENFLUID_GetRunEnvironment \endlink method.
\endif
</ul>

Example:
\code
openfluid::base::SchedulingRequest initializeRun()
{
  std::string InputDir;

  OPENFLUID_GetRunEnvironment("dir.input",InputDir);

  // the current input directory is now available through the InputDir local variable 

  return DefaultDeltaT();
}
\endcode


The keys for requesting runtime environment information are:
<ul>
<li>dir.input [string] : the current input directory
<li>dir.output [string] : the current output directory
<li>dir.temp [string] : the directory for temporary files
<li>mode.cleanoutput [boolean] : cleaning output dir before data saving is enabled/disabled
<li>mode.saveresults [boolean] : result saving in output directory is enabled/disabled
<li>mode.writereport [boolean] : simulation report saving is enabled/disabled
</ul>


\section dev_srccode_msgs Logs, warnings, errors

\subsection dev_srccode_msgs_log Log messages from simulators

Simulators can log messages to both console and files using
\if doc-is-latex
\b OpenFLUID_Logger
\else
\link openfluid::ware::PluggableSimulator::OPENFLUID_Logger OpenFLUID_Logger\endlink
\endif
:
<ul>
<li>
\if doc-is-latex
\b OpenFLUID_Logger.getFile()
\else
\link openfluid::base::StdoutAndFileOutputStream::getFile() OpenFLUID_Logger.getFile() \endlink
\endif
to log messages to file only
<li>
\if doc-is-latex
\b OpenFLUID_Logger.getStdout()
\else
\link openfluid::base::StdoutAndFileOutputStream::getStdout() OpenFLUID_Logger.getStdout() \endlink
\endif
to log messages to console only
<li>
\if doc-is-latex
\b OpenFLUID_Logger.get()
\else
\link openfluid::base::StdoutAndFileOutputStream::get() OpenFLUID_Logger.get() \endlink
\endif
to log messages to file and console.
</ul>

The messages logged to file are put in a file named with the ID of the 
simulator suffixed by _ofware-sim.log, placed in the simulation output directory.

The OpenFLUID_Logger facility is the recommended way to log messages. Please avoid using std::cout
or similar C++ facilities in production or released simulators.

Example:
\code
openfluid::base::SchedulingRequest runStep()
{
  openfluid::core::Unit* TU;

  OPENFLUID_Logger.get() << 
    "This is a message to both file and console" << std::endl;
  OPENFLUID_Logger.getFile() << 
    "This is a message to file only" << std::endl;
  OPENFLUID_Logger.getStdout() << 
    "This is a message to console only" << std::endl;

  OPENFLUID_UNITS_ORDERED_LOOP("TestUnits",TU)
  {
    OPENFLUID_Logger.get() << "TestUnits " << TU->getID() << std::endl;
  }

  return DefaultDeltaT;
}
\endcode


\subsection dev_srccode_msgs_warnerr Raise warnings and errors

In order to trace errors and warnings during the run of a simulation, simulators 
can raise errors and warnings messages. These messages autmatically notice
the OpenFLUID framework that something wrong or critical had happened. An error stops the simulation the 
next time the OpenFLUID framework has the control, a warning does 
not stop the simulation. Error and warnings are reported in the simulation report. 
(openfluid-messages.log file). They both can be dated with the number of the current time index
when the warning or error occurs.\n  

Errors and warnings can be raised using:
<ul>
<li>
\if doc-is-latex
\b OPENFLUID_RaiseWarning
\else
\link openfluid::ware::PluggableSimulator::OPENFLUID_RaiseWarning OPENFLUID_RaiseWarning\endlink
\endif
for a warning notification
<li>
\if doc-is-latex
\b OPENFLUID_RaiseError
\else
\link openfluid::ware::PluggableSimulator::OPENFLUID_RaiseError OPENFLUID_RaiseError\endlink
\endif
for an error notification
</ul>

Example:

\code
void checkConsistency()
{
  double TmpValue;
  openfluid::core::Unit* SU;
    
  OPENFLUID_UNITS_ORDERED_LOOP("SU",SU)
  {
    OPENFLUID_GetAttribute(SU,"MyAttr",TmpValue);
    
    if (TmpValue <= 0)
    {
      OPENFLUID_RaiseError("Wrong value for the MyProp distributed property on SU");
      return false;
    }    
  }
}
\endcode 


\section dev_srccode_debug Debugging

Debugging macros add informations on standard output stream (usually displayed on screen).
It allows developpers to trace various information during simulations.\n 
They are enabled only when debug is enabled at simulators builds.
They are ignored for other build types.\n 

In order to enable debug build mode, the option <tt>-DCMAKE_BUILD_TYPE=Debug</tt>
must be added to the cmake command (e.g. <tt>cmake \<srcpath\> -DCMAKE_BUILD_TYPE=Debug</tt>).

Example of build configuration:
\verbatim
cmake .. -DCMAKE_BUILD_TYPE=Debug
\endverbatim
This debug build mode is disabled using the release build mode, with the option <tt>-DCMAKE_BUILD_TYPE=Release</tt>.\n
\n

The following macros are available for debugging:
<ul>
<li>\if doc-is-latex \b OFDBG_LOCATE
\else #OFDBG_LOCATE
\endif
for file/line location where the macro is called 
<li>\if doc-is-latex \b OFDBG_MESSAGE
\else #OFDBG_MESSAGE
\endif
adding the message given as an argument 
<li>\if doc-is-latex \b OFDBG_UNIT
\else #OFDBG_UNIT
\endif
for information about the unit given as an argument
<li>\if doc-is-latex \b OFDBG_UNIT_EXTENDED
\else #OFDBG_UNIT_EXTENDED
\endif
for extended information about the unit given as an argument
<li>\if doc-is-latex \b OFDBG_EVENT
\else #OFDBG_EVENT
\endif
for information about the event given as an argument
<li>\if doc-is-latex \b OFDBG_EVENTCOLLECTION
\else #OFDBG_EVENTCOLLECTION
\endif
for information about the event collection given as an argument
</ul>
\n
Example:
\code
openfluid::base::SchedulingRequest runStep()
{
  openfluid::core::Unit* TU;
  openfluid::core::DateTime BeginDate,EndDate;
  openfluid::core::EventsCollection EvColl;

  OFDBG_LOCATE;

  BeginDate = OPENFLUID_GetCurrentDate();
  EndDate = OPENFLUID_GetCurrentDate() + OPENFLUID_GetDefaultDeltaT() - 1;


  OPENFLUID_UNITS_ORDERED_LOOP("TU",TU)
  {
     OFDBG_UNIT_EXTENDED(TU);

     EvColl.clear();
     OPENFLUID_GetEvents(TU,BeginDate,EndDate,EvColl);
     OFDBG_EVENTCOLLECTION(EvColl);
  }

  return DefaultDeltaT();
}
\endcode



\section dev_srccode_fortran Fortran 77/90 source code integration

The C++ - Fortran interface is defined in the openfluid/tools/FortranCPP.hpp file.
In order to execute Fortran code from a simulator,
this Fortran source code have to be wrapped into subroutines 
that will be called from the C++ code of the simulation function.\n
To help developers of simulators to achieve this wrapping operation, 
the FortranCPP.hpp file defines macros. 
These macros allows calls of Fortran77 and Fortran90 source code. 
You are invited to read the FortranCPP.hpp file to get more information about these macros.\n

\n
Example of Fortran source code (FSubr.f90):
\code
subroutine displayvector(Fsize,vect)

implicit none

integer Fsize,ifrom
real*8 vect(Fsize)

write(*,*) 'size',Fsize
write(*,*) (vect(i),i=1,Fsize)

return
end
\endcode
\n
Example of declaration block int the .cpp file (MySim.cpp):
\code
BEGIN_EXTERN_FORTRAN
  EXTERN_FSUBROUTINE(displayvector)(FINT *Size, FREAL8 *Vect);
END_EXTERN_FORTRAN
\endcode
\n
Example of call of the fortran subroutine from the initializeRun method (MySim.cpp):
\code
#include <openfluid/tools/FortranCPP.hpp>

openfluid::base::SchedulingRequest initializeRun()
{
  openfluid::core::VectorValue MyVect;
  
  MyVect = openfluid::core::VectorValue(15,9);
  int Size = MyVect.getSize();

  CALL_FSUBROUTINE(displayvector)(&Size,(MyVect.getData()));

  return DefaultDeltaT();
}
\endcode

\n
The compilation and linking of Fortran source code is automatically done 
when adding fortran source files to the SIM_FORTRAN variable in the CMake.in.config file 
(See \ref dev_createsim_exmpl_config).


\section dev_srccode_misctools Miscellaneous tools


These tools have been developped to help simulators developpers 
in their setup of data processing or numerical computation. 
They are available in the namespace openfluid::tools.
In order to use these tools, the corresponding headers 
files must be included in the simulator source code.

As they are not detailed here in this manual, more informations 
about these tools are available in the provided header files (.hpp), 
located in the include/openfluid/tools include directory.


\see openfluid::tools namespace

*/
