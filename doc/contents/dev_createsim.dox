/**

\page dev_createsim Creation of an empty simulator

As mentioned in the previous section (see \ref dev_oviewsim), a simulator must contain two parts :
<ul>
  <li>A signature giving information about the simulator, 
  and used by the OpenFLUID framework to identify and couple simulators 
  <li>A C++ class defining essential methods for computational code
</ul>
These two parts have to be developped in a C++ file (.cpp). 
They must be compiled before using it in the OpenFLUID environment.


\section dev_createsim_env Development environment

In order to build and develop a simulator, it is recommended to use the following tools:
<ul>
 <li>GCC as the C++/C/Fortran compiler</li>
 <li>CMake as the build configuration tool (see http://www.cmake.org).\n
 OpenFLUID provides a CMake module to ease the build of simulators.
 <li>Eclipse as the integrated development environment (see http://www.eclipse.org).\n
 OpenFLUID provides an Eclipse plugin to assist the developer when creating a simulator 
 (Available in the downloads section of the OpenFLUID web site). 
</ul>

Moreover, the required libraries must be installed in order to achieve the build of a simulator.


\section dev_createsim_sign Writing the signature

The simulator signature is a set of informations about the content and behaviour
of the simulator source code.
With these informations, the OpenFLUID framework can evaluate the simulator,
have information on what it does, on what it expects and produces, and can load it dynamically.\n
The informations included in the signature are :
<ul>
<li> Identification
<li> Development information
<li> Expected variables and spatial attributes
<li> Produced variables and spatial attributes
<li> Spatial graph updates
<li> Time step behaviour
</ul>   

Usually, the signature is declared and implemented at the beginning of the .cpp file. 
It starts with the \if doc-is-latex \b BEGIN_SIMULATOR_SIGNATURE \else #BEGIN_SIMULATOR_SIGNATURE \endif
 macro and ends with the \if doc-is-latex \b END_SIMULATOR_SIGNATURE \else #END_SIMULATOR_SIGNATURE \endif
 macro.
The minimal signature must include identification information. See part \ref dev_signature for details on how to write the signature. \n
\n
\n

\section emptyclass_sec Writing the C++ class for the simulator 

The C++ class integrates the computational code of the simulator, corresponding to successive stages of simulations.
You will find a \ref dev_createsim_exmpl below, giving an example of source code of an empty simulator. 
The \ref dev_srccode part gives details about how to develop the computational code in the simulator. 
\n
\n

\section dev_createsim_build Building the simulator

Any OpenFLUID simulator must be compiled using the GCC C++ compiler (g++)
and must be linked to the OpenFLUID libraries and dependencies.\n 
The recommended way to build your simulator is to use the CMake build system 
with the OpenFLUID CMake module, and provide CMake configuration files (CMakeLists.txt, CMake.in.config).\n
These operations can be performed automatically using the OpenFLUID plugin for the Eclipse IDE.\n
\n

These operations can also be performed manually, with the following steps: 
<ol>
<li> Create a build directory in your source directory (e.g. <tt>_build</tt>)
<li> Go to this build directory
<li> Run the <tt>cmake ..</tt> command, with the optional <tt>-DCMAKE_BUILD_TYPE=Debug</tt> option for debugging mode
<li> Run the build command (e.g. <tt>make</tt>) 
</ol>
These steps are for Linux systems, and must be slightly adapted for other systems.\n
\n
  
\section dev_createsim_exmpl Complete example 

The example below show a complete example of an empty simulator, 
including source code and build configuration using the OpenFLUID CMake module.\n
\n

\subsection dev_createsim_exmpl_cpp File ExampleSimulator.cpp containing the simulator source code

\code
#include <openfluid/ware/PluggableSimulator.hpp>

DECLARE_SIMULATOR_PLUGIN


// =====================================================================
// =====================================================================


BEGIN_SIMULATOR_SIGNATURE("example.simulator")

  DECLARE_NAME("Example simulator");
  DECLARE_DESCRIPTION("This simulator is an example");
  DECLARE_VERSION("13.05");
  DECLARE_STATUS(openfluid::ware::EXPERIMENTAL);

  DECLARE_AUTHOR("John","john@foobar.org");
  DECLARE_AUTHOR("Dave","dave@foobar.org");
  DECLARE_AUTHOR("Mike","mike@foobar.org");

END_SIMULATOR_SIGNATURE


// =====================================================================
// =====================================================================


class ExampleSimulator : public openfluid::ware::PluggableSimulator
{
  private:  

  public:


    Example(): PluggableSimulator()
    {
      // Here is source code for constructor
    }


    // =====================================================================
    // =====================================================================


    ~Example()
    {
      // Here is source code for destructor
    }


    // =====================================================================
    // =====================================================================


    void initParams(const openfluid::ware::WareParams_t& /*Params*/)
    {
      // Here is source code for processing simulator parameters
    }


    // =====================================================================
    // =====================================================================


    void prepareData()
    {
      // Here is source code for data preparation
    }


    // =====================================================================
    // =====================================================================


    void checkConsistency()
    {  
      // Here is source code for specific consistency checking
    }


    // =====================================================================
    // =====================================================================


    openfluid::base::SchedulingRequest initializeRun()
    {
      // Here is source code for initialization

      return DefaultDeltaT();
    }


    // =====================================================================
    // =====================================================================


    openfluid::base::SchedulingRequest runStep()
    {
      // Here is source code for each step run

      return DefaultDeltaT();
    }


    // =====================================================================
    // =====================================================================


    void finalizeRun()
    {
      // Here is source code for finalization
    }

};


DEFINE_SIMULATOR_CLASS(ExampleSimulator);

\endcode 
  

\subsection dev_createsim_exmpl_config File CMake.in.config containing the build configuration 
 
\verbatim
# Simulator ID
SET(SIM_ID example.simulator)


# list of CPP files, the sim2doc tag must be contained in the first one
SET(SIM_CPP ExampleSimulator.cpp)

# list of Fortran files, if any
# ex: SET(SIM_FORTRAN Calc.f)
#SET(SIM_FORTRAN )


# set this to add include directories
# ex: SET(SIM_INCLUDE_DIRS /path/to/include/A/ /path/to/include/B/)
#SET(SIM_INCLUDE_DIRS )

# set this to add libraries directories
# ex: SET(SIM_INCLUDE_DIRS /path/to/libA/ /path/to/libB/)
#SET(SIM_LIBRARY_DIRS )

# set this to add linked libraries
# ex: SET(SIM_LINK_LIBS libA libB)
#SET(SIM_LINK_LIBS )

# set this to add definitions
# ex: SET(SIM_DEFINITIONS "-DDefinition")
#SET(SIM_DEFINITIONS )


# set this to force an install path to replace the default one
#SET(SIM_INSTALL_PATH "/my/install/path/")


# set this to 1 if you do not want automatic build of sim2doc documentation
SET(SIM_SIM2DOC_DISABLED 1)

#set to 1 to disable installation of sim2doc built documentation
#SET (SIM_SIM2DOC_INSTALL_DISABLED 1)

# set this if you want to use a specific sim2doc template
#SET(SIM_SIM2DOC_TPL "/path/to/template")


# set this if you want to add tests 
# given tests names must be datasets placed in a subdir named "tests"
# each dataset in the subdir must be names using the test name and suffixed by .IN
# ex for tests/test01.IN and tests/test02.IN: SET(SIM_TESTS_DATASETS test01 test02)
#SET(SIM_TESTS_DATASETS )
\endverbatim



\subsection dev_createsim_exmpl_cmakelists File CMakeLists.txt containing the build system using the OpenFLUID CMake module
 
\verbatim
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

INCLUDE(CMake.in.config)

FIND_PACKAGE(OpenFLUID REQUIRED core base tools ware)

OPENFLUID_ADD_SIMULATOR(SIM)
\endverbatim 


*/
