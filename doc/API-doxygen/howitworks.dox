/**

\page howitworks General information



\section genorg_ssec General organization
 
The OpenFLUID libraries features are gathered into the openfluid namespace, which is made of several parts. The three main parts are: 
<ul>
  <li>openfluid::core, defined in openfluid/core.hpp, gathers all the classes for the shared data between the OpenFLUID framework and the functions, and between the functions themselves
  <li>openfluid::base, defined in openfluid/base.hpp, gathers all the classes for the dynamic linking between the OpenFLUID framework  and the functions, and in particular the openfluid::base::PluggableFunction class
  <li>openfluid::tools, defined in openfluid/tools.hpp, gathers tools available for data processing, files reading, ...
</ul>

\n

These libraries mainly rely on external libraries:
<ul> 
  <li>The boost libraries : http://wws.boost.org/   
  <li>The libXML2 library for XML file handling : http://xmlsoft.org/
  <li>The C++ Standard Type Library (STL) for common data structures : http://www.sgi.com/tech/stl/ 
</ul>
\n
\n
\image html API_stack.png 
\image latex API_stack.png 


\section feat_sec Features 
 
\subsection featplug_ssec plug-in/framework software architecture

The OpenFLUID framework provides a plugin interface for creating functions that can be used by any OpenFLUID software application.\n
This involves the following classes and structures (non-exhaustive list): 
<ul>
  <li>openfluid::base::PluggableFunction 
  <li>openfluid::base::SimulationStatus 
  <li>openfluid::base::SimulationInfo
</ul>
 
\subsection featstruct_ssec Spatio-temporal data structure 

In order to store and manage all the data handled to represent the spatial domain and the simulation information, the OpenFLUID framework defines a data structure for spatio-temporal data management.\n
This involves the following classes (non-exhaustive list): 
<ul>
  <li>openfluid::core::Unit
</ul>   


\subsection feattypes_ssec Simulation data types and structure

The simulation variables can be scalar data (a double precision floating value) or vector data (vector of double precision floating values). A date is associated to each value of simulation variables.  
This involves the following classes and structures (non-exhaustive list):
<ul>
  <li>openfluid::core::DateTime
  <li>openfluid::core::ScalarValue
  <li>openfluid::core::VectorValue          
</ul>


\subsection feattypes_ssec Discrete events

Simulation functions can handle discrete events, associated to homogeneous units. 
This involves the following classes and structures (non-exhaustive list):
<ul>
  <li>openfluid::core::Event          
  <li>openfluid::core::EventsCollection  
</ul>

  
\subsection feattools_ssec Tools  

This involves the following classes and functions (non-exhaustive list): 
<ul>
  <li>openfluid::tools::ColumnTextParser
  <li>openfluid::tools::DateTimeSerie
  <li>openfluid::tools::DistributeInterpolate    
  <li>openfluid::tools::IsCloseEnough    
  <li>openfluid::tools::IsVeryClose    
</ul>

The FortranCPP.h header file make Fortran code encapsulation (into simulation functions) easier.



\n
\n 


*/