#!/bin/sh

############################

CC=gcc
CPP=g++
F77=

SETUPH=sdk/setup.h

EXEFILEROOT=mhydas-mpp

USE_SI_INTERNALS=1

PLUGSUBDIR=plugs

MDEF_INDIR=MHYDAS.IN
MDEF_OUTDIR=MHYDAS.OUT

MDEF_CONFFILE=model.xml
MDEF_INDATAFILE=inputdata.xml
MDEF_OUTPUTCONFFILE=output.xml

MDEF_SUDEFSFILE=SUdefs.dat
MDEF_RSDEFSFILE=RSdefs.dat
MDEF_GUDEFSFILE=GUdefs.dat

MDEF_SUPROPSFILE=SUprops.xml
MDEF_RSPROPSFILE=RSprops.xml
MDEF_GUPROPSFILE=GUprops.xml

MDEF_SUINIFILE=SUini.xml
MDEF_RSINIFILE=RSini.xml
MDEF_GUINIFILE=GUini.xml

MDEF_RAINEVTFILE=rainevent.xml
MDEF_RAINDISTRIFILE=raindistri.dat

MDEF_OUTPUTFILES_EXT=out


############################
############################



# ------------ option file for makefiles -------------


OPTFILE=makeopts.inc

if [ "$OSTYPE" = "msys" ]; then
  EXEFILE=$EXEFILEROOT.exe
  DYNLIBEXT=dll
  STALIBEXT=a
  PLUGINEXT=dllmpi
  DYNLIBCCFLAGS=
else
  EXEFILE=$EXEFILEROOT
  DYNLIBEXT=so
  STALIBEXT=a
  PLUGINEXT=sompi
  DYNLIBCCFLAGS=-fPIC
fi


echo "# Makefile options generated by configure script." > $OPTFILE
echo "" >> $OPTFILE
echo "" >> $OPTFILE

echo "# platform" >> $OPTFILE
echo "PLATFORM = $MACHTYPE" >> $OPTFILE

echo "" >> $OPTFILE

echo "# C compilator" >> $OPTFILE
echo "CC = $CC" >> $OPTFILE

echo "" >> $OPTFILE

echo "# C/C++ compilator" >> $OPTFILE
echo "CPP = $CPP" >> $OPTFILE

echo "" >> $OPTFILE

echo "# Fortran77 compilator" >> $OPTFILE
echo "F77 = $F77" >> $OPTFILE

echo "" >> $OPTFILE

echo "# compile options for GEOS library" >> $OPTFILE
VARTOWRITE=
#VARTOWRITE=`geos-config --libs`
echo "GEOSLIBS = $VARTOWRITE" >> $OPTFILE
#VARTOWRITE=`geos-config --cflags`
echo "GEOSFLAGS = $VARTOWRITE" >> $OPTFILE

echo "" >> $OPTFILE

echo "# compile options for wxWidgets library" >> $OPTFILE
VARTOWRITE=`wx-config --libs base`
echo "WXLIBS = $VARTOWRITE" >> $OPTFILE
VARTOWRITE=`wx-config --cxxflags base`
echo "WXFLAGS = $VARTOWRITE" >> $OPTFILE

echo "" >> $OPTFILE

echo "# common compile options" >> $OPTFILE
echo "CCCLIBS =" >> $OPTFILE

echo "# common compile flags" >> $OPTFILE 
echo "CCCFLAGS =" >> $OPTFILE

echo "# dynamic lib compile flags" >> $OPTFILE 
echo "DYNLIBCCFLAGS = $DYNLIBCCFLAGS" >> $OPTFILE

echo "# dynamic lib link flags" >> $OPTFILE 
echo "DYNLIBLDFLAGS = $DYNLIBLDFLAGS" >> $OPTFILE


echo "" >> $OPTFILE

echo "# main executable file" >> $OPTFILE
echo "EXEFILE = $EXEFILE" >> $OPTFILE

echo "" >> $OPTFILE

echo "# plugins extension" >> $OPTFILE 
echo "PLUGINEXT = $PLUGINEXT" >> $OPTFILE  

echo "" >> $OPTFILE

echo "# dynamic library  extension" >> $OPTFILE 
echo "DYNLIBEXT = $DYNLIBEXT" >> $OPTFILE  

echo "" >> $OPTFILE

echo "# static library  extension" >> $OPTFILE 
echo "STALIBEXT = $STALIBEXT" >> $OPTFILE  

echo "" >> $OPTFILE

echo "# build base dir" >> $OPTFILE
echo "BASEBUILDDIR = `pwd`/../../build/$MACHTYPE" >> $OPTFILE

echo "# binary dir" >> $OPTFILE
echo "BASEBINDIR = \$(BASEBUILDDIR)/bin" >> $OPTFILE

echo "# built objects dir" >> $OPTFILE
echo "BASEOBJDIR = \$(BASEBUILDDIR)/obj" >> $OPTFILE

echo "# built libs dir" >> $OPTFILE
echo "BASELIBDIR = \$(BASEBUILDDIR)/lib" >> $OPTFILE

echo "# built doc dir" >> $OPTFILE
echo "BASEDOCDIR = `pwd`/../../doc" >> $OPTFILE


echo "" >> $OPTFILE


echo "# built plugins subdir" >> $OPTFILE 
echo "PLUGSUBDIR = $PLUGSUBDIR" >> $OPTFILE  


echo "configuration file for compilation generated ($OPTFILE)"




# ------------ setup header file for source code -------------
echo "/**" > $SETUPH
VARTOWRITE=`basename $SETUPH`
echo "  \file $VARTOWRITE" >> $SETUPH
echo "  automatically generated by configure script." >> $SETUPH
echo "*/" >> $SETUPH

echo "" >> $SETUPH

echo "#ifndef __SETUP_H__" >> $SETUPH
echo "#define __SETUP_H__" >> $SETUPH

echo "" >> $SETUPH

echo "#include <wx/string.h>" >> $SETUPH

echo "" >> $SETUPH

echo "// Default directories" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_INDIR = wxT(\"$MDEF_INDIR\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_OUTDIR = wxT(\"$MDEF_OUTDIR\");" >> $SETUPH

echo "" >> $SETUPH

echo "// Default files" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_CONFFILE = wxT(\"$MDEF_CONFFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_INDATAFILE = wxT(\"$MDEF_INDATAFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_OUTPUTCONFFILE = wxT(\"$MDEF_OUTPUTCONFFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_SUDEFSFILE = wxT(\"$MDEF_SUDEFSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_RSDEFSFILE = wxT(\"$MDEF_RSDEFSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_GUDEFSFILE = wxT(\"$MDEF_GUDEFSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_SUPROPSFILE = wxT(\"$MDEF_SUPROPSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_RSPROPSFILE = wxT(\"$MDEF_RSPROPSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_GUPROPSFILE = wxT(\"$MDEF_GUPROPSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_SUINIFILE = wxT(\"$MDEF_SUINIFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_RSINIFILE = wxT(\"$MDEF_RSINIFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_GUINIFILE = wxT(\"$MDEF_GUINIFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_RAINEVTFILE = wxT(\"$MDEF_RAINEVTFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_RAINDISTRIFILE = wxT(\"$MDEF_RAINDISTRIFILE\");" >> $SETUPH

echo "" >> $SETUPH

echo "// Default file extensions" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_OUPUTFILES_EXT = wxT(\"$MDEF_OUTPUTFILES_EXT\");" >> $SETUPH

echo "" >> $SETUPH

echo "// File formats" >> $SETUPH
echo "const unsigned int MHYDAS_SUDEFSFILE_COLNBR = 8;" >> $SETUPH
echo "const unsigned int MHYDAS_RSDEFSFILE_COLNBR = 10;" >> $SETUPH
echo "const unsigned int MHYDAS_GUDEFSFILE_COLNBR = 4;" >> $SETUPH
echo "const unsigned int MHYDAS_RAINDISTRIFILE_COLNBR = 2;" >> $SETUPH

echo "" >> $SETUPH

echo "// Plugins extension" >> $SETUPH
echo "const wxString MHYDAS_PLUGINS_EXT = wxT(\"$PLUGINEXT\");" >> $SETUPH

echo "" >> $SETUPH

echo "// Plugins subdir" >> $SETUPH
echo "const wxString MHYDAS_PLUGINS_SUBDIR = wxT(\"$PLUGSUBDIR\");" >> $SETUPH

echo "" >> $SETUPH

if [ -x /usr/bin/svnversion ]; then
  echo "// Subversion revision version" >> $SETUPH
  echo "#define SVN_REV" >> $SETUPH
  echo "const wxString SVN_REVISION = wxT(\"`svn info --revision HEAD | grep "RÃ©vision :" | cut -d" " -f3 `\");" >> $SETUPH
  echo "" >> $SETUPH
fi

if [ $USE_SI_INTERNALS -eq 1 ]; then
  echo "// Use SI units for internal storages" >> $SETUPH
  echo "#define USE_SI_INTERNALS" >> $SETUPH
  echo "" >> $SETUPH
fi


echo "#endif" >> $SETUPH

echo "" >> $SETUPH

echo "setup file for source code generated ($SETUPH)"

