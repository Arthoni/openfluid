#!/bin/sh

############################

LANG=C

usage_info() {
  echo "MHYDAS configure script usage:\n"
  echo "  ./configure [OPTION]\n"
  echo " available options:"
  echo "      --release      builds a release version" 
  echo "      --devel        builds a development version"
  echo "      --nightly      builds a nightly-build version"
}



if [ "$1" != "--release" ] && [ "$1" != "--devel" ] && [ "$1" != "--nightly" ]; then
  usage_info
  exit 1
fi


SHELLCMD=/bin/bash


if [ -z "$OSTYPE" ]; then
  if [ -x $SHELLCMD ]; then
    OSTYPE=`$SHELLCMD -c 'echo \$OSTYPE'`
  fi
  if [ -z "$OSTYPE" ]; then
    echo "unable to determine \$OSTYPE value. aborting."
    exit 1
  fi
fi

if [ "$OSTYPE" != "linux-gnu" ] && [ "$OSTYPE" != "msys" ]; then
  echo "platform not supported. aborting"
  exit 1
fi


if [ -z "$MACHTYPE" ]; then
  if [ -x $SHELLCMD ]; then
    MACHTYPE=`$SHELLCMD -c 'echo \$MACHTYPE'`
  fi
  if [ -z "$MACHTYPE" ]; then
    echo "unable to determine \$MACHTYPE value. aborting."
    exit 1
  fi
fi


. ./configure.in.common
. ./configure.in.$OSTYPE


############################


#for being seen from mhydasdk-config script
export MHYDASDKPREFIX 


OPTFILE=makeopts.inc
REVFILE=revision

SETUPH=src/main/$SETUPH

rm -f $OPTFILE
rm -f $SETUPH


BUILDVER=
case $1 in 
  "--nightly") BUILDVER="nightly";;   
  "--devel") BUILDVER="development";;
esac


SVNREV=x
if [ -x /usr/bin/svn ]; then
  echo `svn info -r HEAD | grep "Revision:" | cut -d" " -f2` > $REVFILE
fi

if [ -r $REVFILE ]; then
  SVNREV=`cat $REVFILE`
fi

SVNREV=$SVNREV


# ------------ option file for makefiles -------------

if [ "$OSTYPE" = "msys" ]; then
  EXEFILE=$EXEFILEROOT.exe
  DYNLIBEXT=dll
  STALIBEXT=a
  PLUGINEXT=dllmpi
  DYNLIBCCFLAGS=
else
  EXEFILE=$EXEFILEROOT
  DYNLIBEXT=so
  STALIBEXT=a
  PLUGINEXT=sompi
  DYNLIBCCFLAGS=-fPIC
fi


CCCFLAGS=

if [ "$1" = "--release" ]; then 
  CCCFLAGS=$RELEASE_CCCFLAGS
fi

if [ "$1" = "--devel" ]; then
  CCCFLAGS=$DEVEL_CCCFLAGS
fi

if [ "$1" = "--nightly" ]; then
  CCCFLAGS=$NIGHTLY_CCCFLAGS
fi



echo "# Makefile options generated by configure script." > $OPTFILE
echo "" >> $OPTFILE
echo "" >> $OPTFILE

echo "# platform" >> $OPTFILE
echo "PLATFORM = $MACHTYPE"  >> $OPTFILE

echo "" >> $OPTFILE

echo "# compilator lang" >> $OPTFILE
echo "LANG = C" >> $OPTFILE

echo "" >> $OPTFILE

echo "# C compilator" >> $OPTFILE
echo "CC = $CC" >> $OPTFILE

echo "" >> $OPTFILE

echo "# C/C++ compilator" >> $OPTFILE
echo "CPP = $CPP" >> $OPTFILE

echo "" >> $OPTFILE

echo "# Fortran77 compilator" >> $OPTFILE
echo "F77 = $F77" >> $OPTFILE

echo "" >> $OPTFILE

echo "# compile options for mhydas sdk" >> $OPTFILE
VARTOWRITE=
VARTOWRITE=`$MHYDASDKPREFIX/bin/mhydasdk-config --libs`
echo "MHYDASDKLIBS = $VARTOWRITE" >> $OPTFILE
VARTOWRITE=`$MHYDASDKPREFIX/bin/mhydasdk-config --cflags`
echo "MHYDASDKFLAGS = $VARTOWRITE" >> $OPTFILE

echo "" >> $OPTFILE

echo "# compile options for wxWidgets library" >> $OPTFILE
VARTOWRITE=`wx-config --libs base`
echo "WXLIBS = $VARTOWRITE" >> $OPTFILE
VARTOWRITE=`wx-config --cxxflags base`
echo "WXFLAGS = $VARTOWRITE" >> $OPTFILE

echo "" >> $OPTFILE

echo "# common compile options" >> $OPTFILE
echo "CCCLIBS =" >> $OPTFILE

echo "# common compile flags" >> $OPTFILE 
echo "CCCFLAGS = $CCCFLAGS" >> $OPTFILE

echo "# dynamic lib compile flags" >> $OPTFILE 
echo "DYNLIBCCFLAGS = $DYNLIBCCFLAGS" >> $OPTFILE

echo "# dynamic lib link flags" >> $OPTFILE 
echo "DYNLIBLDFLAGS = $DYNLIBLDFLAGS" >> $OPTFILE


echo "" >> $OPTFILE

echo "# main executable file" >> $OPTFILE
echo "EXEFILE = $EXEFILE" >> $OPTFILE

echo "" >> $OPTFILE

echo "# plugins extension" >> $OPTFILE 
echo "PLUGINEXT = $PLUGINEXT" >> $OPTFILE  


echo "" >> $OPTFILE

echo "# dynamic library  extension" >> $OPTFILE 
echo "DYNLIBEXT = $DYNLIBEXT" >> $OPTFILE  

echo "" >> $OPTFILE

echo "# static library  extension" >> $OPTFILE 
echo "STALIBEXT = $STALIBEXT" >> $OPTFILE  

echo "" >> $OPTFILE

# détermination du chemin absolu de la racine du projet située ../..
ORIGPATH=`pwd`
#ABSPATH=$ORIGPATH/..
ABSPATH=$ORIGPATH
cd $ABSPATH
ABSPATH=`pwd`
cd $ORIGPATH


echo "# base dir" >> $OPTFILE
echo "BASEMAINDIR = $ABSPATH" >> $OPTFILE


echo "# build base dir" >> $OPTFILE
echo "BASEBUILDDIR = $ABSPATH/build/$MACHTYPE" >> $OPTFILE

echo "# binary dir" >> $OPTFILE
echo "BASEBINDIR = \$(BASEBUILDDIR)/bin" >> $OPTFILE

echo "# built objects dir" >> $OPTFILE
echo "BASEOBJDIR = \$(BASEBUILDDIR)/obj" >> $OPTFILE

echo "# built libs dir" >> $OPTFILE
echo "BASELIBDIR = \$(BASEBUILDDIR)/lib" >> $OPTFILE

echo "# built doc dir" >> $OPTFILE
echo "BASEDOCDIR = $ABSPATH/doc" >> $OPTFILE

echo "# packages dir" >> $OPTFILE
echo "BASEPACKDIR = $ABSPATH/packages/$MACHTYPE" >> $OPTFILE

echo "" >> $OPTFILE

echo "# built plugins subdir" >> $OPTFILE 
echo "PLUGSUBDIR = $PLUGSUBDIR" >> $OPTFILE  


echo "# build type" >> $OPTFILE
echo "BUILDVER = $BUILDVER" >> $OPTFILE

echo "# svn revision value" >> $OPTFILE
echo "SVNREV = $SVNREV" >> $OPTFILE

echo "# version" >> $OPTFILE
echo "MAJORVER = $MAJORVER" >> $OPTFILE
echo "MINORVER = $MINORVER" >> $OPTFILE
echo "RELEASESTATUS = $RELEASESTATUS" >> $OPTFILE


echo "# package name root" >> $OPTFILE
if [ "$BUILDVER" = "nightly" ]; then
  echo "BINPACKNAMEROOT = mhydas-bin-$MAJORVER.$MINORVER-$MACHTYPE-nightly-`date +%Y%m%d`" >> $OPTFILE  
fi

if [ "$BUILDVER" = "development" ]; then
  echo "BINPACKNAMEROOT = mhydas-bin-$MAJORVER.$MINORVER-$MACHTYPE-development-$SVNREV" >> $OPTFILE  
fi


if [ -z $BUILDVER ]; then
  echo "BINPACKNAMEROOT = mhydas-bin-$MAJORVER.$MINORVER-$MACHTYPE" >> $OPTFILE  
fi

echo "" >> $OPTFILE
echo "SDKPREFIX = $MHYDASDKPREFIX" >> $OPTFILE
echo "MHYDASDKPATH = $MHYDASDKPREFIX/bin:$PATH" >> $OPTFILE
echo "" >> $OPTFILE


echo "# Packages infos" >> $OPTFILE

echo "ZIP = $ZIPBIN" >> $OPTFILE

echo "PACKMAINTAINER=$PACKMAINTAINER" >> $OPTFILE
echo "EDGYDEPENDS=$EDGYDEPENDS" >> $OPTFILE
echo "DAPPERDEPENDS=$DAPPERDEPENDS" >> $OPTFILE
echo "PACKSECTION=$PACKSECTION" >> $OPTFILE
echo "PACKPRIORITY=$PACKPRIORITY" >> $OPTFILE
echo "PACKARCH=$PACKARCH" >> $OPTFILE
echo "PACKDESC=$PACKDESC" >> $OPTFILE

echo "PACKROOT = $PACKROOT" >> $OPTFILE

PACKNAME=$PACKROOT\_$MAJORVER.$MINORVER-$SVNREV$RELEASESTATUS\_$PACKARCH

echo "PACKNAME = $PACKNAME" >> $OPTFILE

echo "APPNAME = $APPNAME" >> $OPTFILE
echo "STDSYSDIR = $STDSYSDIR" >> $OPTFILE

echo "configuration file for compilation generated ($OPTFILE)"




# ------------ setup header file for source code -------------
echo "/**" > $SETUPH
VARTOWRITE=`basename $SETUPH`
echo "  \file $VARTOWRITE" >> $SETUPH
echo "  automatically generated by configure script." >> $SETUPH
echo "*/" >> $SETUPH

echo "" >> $SETUPH

echo "#ifndef __SETUP_H__" >> $SETUPH
echo "#define __SETUP_H__" >> $SETUPH

echo "" >> $SETUPH

echo "#include <wx/string.h>" >> $SETUPH

echo "" >> $SETUPH

echo "// App Name" >> $SETUPH
echo "const wxString MHYDAS_APPNAME = wxT(\"$APPNAME\");" >> $SETUPH

echo "" >> $SETUPH



echo "// Default directories" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_INDIR = wxT(\"$MDEF_INDIR\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_OUTDIR = wxT(\"$MDEF_OUTDIR\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_TRACEDIR = wxT(\"$MDEF_TRACEDIR\");" >> $SETUPH


echo "" >> $SETUPH

echo "// Default files" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_MODELFILE = wxT(\"$MDEF_MODELFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_RUNFILE = wxT(\"$MDEF_RUNFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_INDATAFILE = wxT(\"$MDEF_INDATAFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_OUTPUTCONFFILE = wxT(\"$MDEF_OUTPUTCONFFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_SUDEFSFILE = wxT(\"$MDEF_SUDEFSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_RSDEFSFILE = wxT(\"$MDEF_RSDEFSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_GUDEFSFILE = wxT(\"$MDEF_GUDEFSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_SUPROPSFILE = wxT(\"$MDEF_SUPROPSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_RSPROPSFILE = wxT(\"$MDEF_RSPROPSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_GUPROPSFILE = wxT(\"$MDEF_GUPROPSFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_SUINIFILE = wxT(\"$MDEF_SUINIFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_RSINIFILE = wxT(\"$MDEF_RSINIFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_GUINIFILE = wxT(\"$MDEF_GUINIFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_RAINEVTFILE = wxT(\"$MDEF_RAINEVTFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_SURAINDISTRIFILE = wxT(\"$MDEF_SURAINDISTRIFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_RSRAINDISTRIFILE = wxT(\"$MDEF_RSRAINDISTRIFILE\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_SIMINFOFILE = wxT(\"$MDEF_SIMINFOFILE\");" >> $SETUPH

echo "" >> $SETUPH

echo "// Default file extensions" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_OUPUTFILES_EXT = wxT(\"$MDEF_OUTPUTFILES_EXT\");" >> $SETUPH
echo "const wxString MHYDAS_DEFAULT_TRACEFILES_EXT = wxT(\"$MDEF_TRACEFILES_EXT\");" >> $SETUPH


echo "" >> $SETUPH

echo "// File formats" >> $SETUPH
echo "const unsigned int MHYDAS_SUDEFSFILE_COLNBR = 8;" >> $SETUPH
echo "const unsigned int MHYDAS_RSDEFSFILE_COLNBR = 10;" >> $SETUPH
echo "const unsigned int MHYDAS_GUDEFSFILE_COLNBR = 4;" >> $SETUPH
echo "const unsigned int MHYDAS_RAINDISTRIFILE_COLNBR = 2;" >> $SETUPH

echo "" >> $SETUPH

echo "// Plugins extension" >> $SETUPH
echo "const wxString MHYDAS_PLUGINS_EXT = wxT(\"$PLUGINEXT\");" >> $SETUPH

echo "" >> $SETUPH

echo "// Plugins dirs" >> $SETUPH
echo "const wxString MHYDAS_PLUGINS_SUBDIR = wxT(\"$PLUGSUBDIR\");" >> $SETUPH
echo "const wxString MHYDAS_PLUGINS_STDSYSDIR = wxT(\"$STDSYSDIR/$APPNAME/$PLUGSUBDIR\");" >> $SETUPH
echo "" >> $SETUPH


echo "// Version information" >> $SETUPH
echo "const wxString MAJOR_VERSION = wxT(\"$MAJORVER\");" >> $SETUPH
echo "const wxString MINOR_VERSION = wxT(\"$MINORVER\");" >> $SETUPH
echo "const wxString BUILD_VERSION = wxT(\"$BUILDVER\");" >> $SETUPH
echo "const wxString RELEASE_STATUS = wxT(\"$RELEASESTATUS\");" >> $SETUPH

echo "" >> $SETUPH

#if [ $SVNREV != "x" ]; then
  echo "// Subversion revision information" >> $SETUPH
  echo "#define SVN_REV" >> $SETUPH
  echo "const wxString SVN_REVISION = wxT(\"$SVNREV\");" >> $SETUPH
  echo "" >> $SETUPH
#fi

if [ $INPUT_RAIN_MMH -eq 1 ]; then
  echo "// Input rain inn mm/h" >> $SETUPH
  echo "#define INPUT_RAIN_MMH" >> $SETUPH
  echo "" >> $SETUPH
fi


echo "#endif" >> $SETUPH

echo "" >> $SETUPH

echo "setup file for source code generated ($SETUPH)"


# ------------ setup header file for source code -------------


exit 0
